% Encoding: UTF-8
% **** VERY IMPORTANT **** :
% -----------------------------------------------------------------------
% In order to avoid duplicated references, please first add your
% references to our Zotero's group (EOSC_IQRS) and then copy-paste the
% exported .bib reference. This exported .bib will be associated with an
% unique ID which we'll share along all subgroups.

% NOT yet added in Zoteto
@article{kitchenham2007guidelines,
  title={{Guidelines for performing Systematic Literature Reviews in Software Engineering}},
  author={Kitchenham, Barbara and Charters, Stuart},
  journal={Engineering},
  volume={45},
  number={4ve},
  pages={1051},
  year={2007}
}

% -----------------------------------------------------------------------
% Added in Zotero (below)

@article{orviz_fernandez_eosc-synergy_2020,
	title = {{EOSC}-synergy: A set of Common Service Quality Assurance Baseline Criteria for Research Projects},
	rights = {{openAccess}, Creative Commons},
	url = {https://digital.csic.es/handle/10261/214441},
	doi = {10.20350/DIGITALCSIC/12533},
	shorttitle = {{EOSC}-synergy},
	abstract = {The purpose of this document is to dene a set of quality standards, procedures and best practices to conform a Service Quality Assurance plan to serve as a reference within the European research ecosystem related projects for the adequate development, deployment, operation and integration of services into production research infrastructures.},
	author = {Orviz Fernández, Pablo and David, Mario and Gomes, Jorge and {Joao Pina} and Bernardo, Samuel and Campos Plasencia, Isabel and Moltó, Germán and Caballer, Miguel},
	editora = {{Digital.CSIC} and {Digital.CSIC}},
	editoratype = {collaborator},
	urldate = {2022-02-10},
	date = {2020-06-15},
	langid = {english},
}

@article{shepherdson_cessda_2019,
	title = {{CESSDA} Software Maturity Levels},
	url = {https://zenodo.org/record/2614050},
	abstract = {This document is based on an extract from {CESSDA} Technical Architecture v1.0, May 2016. It was created so that readers interested in {CESSDA}’s Software Maturity Levels ({SMLs}) can find out more, without having to browse through the entire Technical Architecture document. Usability is not only a political imperative of European Research Infrastructure Consortiums’ need to maximise their return on investment, but is also essential for growth with limited funds and ongoing interoperability. Mandating and checking the sustainability/usability of the software components of {CESSDA}’s technical Research Infrastructure is essential if it is to strengthen and grow, however there are always risks attached, for example: how much effort is required to integrate it into the current technical framework, how will it be maintained, does it conform to the standards required? Therefore the need to measure the maturity of software designed for use by {CESSDA} is essential to ensure the quality of the technical Research Infrastructure is maintained.},
	author = {Shepherdson, John},
	urldate = {2022-02-10},
	date = {2019-03-29},
	doi = {10.5281/zenodo.2614050},
	keywords = {Quality, Software},
}

@article{orviz_set_2017,
	title = {A set of common software quality assurance baseline criteria for research projects},
	rights = {{openAccess}},
	url = {https://digital.csic.es/handle/10261/160086},
	doi = {10.20350/DIGITALCSIC/12543},
	abstract = {The purpose of this document is to define a set of quality standards, procedures and best practices to conform a Software Quality Assurance plan to serve as a reference within the European research ecosystem related projects for the adequate development and timely delivery of software products.},
	author = {Orviz, Pablo and López García, Álvaro and Duma, Doina Cristina and Donvito, Giacinto and David, Mario and Gomes, Jorge},
	editora = {{Digital.CSIC} and {Digital.CSIC}},
	editoratype = {collaborator},
	urldate = {2022-02-10},
	date = {2017},
	langid = {english},
}

@book{directorate-general_for_research_and_innovation________________________________________european_commission_scholarly_2020,
	location = {{LU}},
	title = {Scholarly infrastructures for research software: report from the {EOSC} Executive Board Working Group ({WG}) Architecture Task Force ({TF}) {SIRS}},
	isbn = {978-92-76-25568-0},
	url = {https://data.europa.eu/doi/10.2777/28598},
	shorttitle = {Scholarly infrastructures for research software},
	abstract = {The Task Force on Scholarly Infrastructures of Research Software, as part of the Architecture {WG} of the European Open Science Cloud ({EOSC}) Executive Board, has established a set of recommendations to allow {EOSC} to include software, next to other research outputs like publications and data, in the realm of its research artifacts. This work is built upon a survey and documentation of a representative panel of current operational infrastructures across Europe, comparing their scopes and approaches. This report summarises the state of the art, identifies best practices, as well as open problems, and paves the way for federating the different approaches in view of supporting the software pillar of {EOSC}.},
	publisher = {Publications Office of the European Union},
	author = {{Directorate-General for Research and Innovation
                
                        (European Commission)}},
	urldate = {2022-01-28},
	date = {2020},
}

@report{gruenpeter_defining_2021,
	title = {Defining Research Software: a controversial discussion},
	url = {https://zenodo.org/record/5504016},
	shorttitle = {Defining Research Software},
	abstract = {Software is essential in modern research; it plays vital roles at multiple stages of the research lifecycle. The term Research Software is widely used in the academic community but, what do we mean when we use these terms? Software and research? When you think of software, you may think of a digital object that is executed on a machine. Yet software is more than just this, it is a complex and evolving artifact. It may be a concept or a project designed to solve a puzzle by a team or a community that develops its functionalities and algorithms, which might not be digital objects. Furthermore, the software artifacts are digital objects, e.g., executables and source code files for different environments. These digital artifacts, which are used in a scholarly setting, might be important in the research process, but should all these be considered Research Software? This report is the result of a discussion examining the scope of the community definition of the {FAIR} principles for Research Software as part of the work in the {FAIR} for Research Software working group ({FAIR}4RS). We aim to clarify the scope of the {FAIR} principles by identifying which software artifacts the {FAIR} principles should apply to. This discussion portrayed a complex landscape of software uses in research and existing definitions that can help to better understand the complexity of different types of software in academia. Finally we determine the scope of the {FAIR}4RS with a short and concise definition of Research Software as a separate metaphor of software in research.},
	institution = {Zenodo},
	author = {Gruenpeter, Morane and Katz, Daniel S. and Lamprecht, Anna-Lena and Honeyman, Tom and Garijo, Daniel and Struck, Alexander and Niehues, Anna and Martinez, Paula Andrea and Castro, Leyla Jael and Rabemanantsoa, Tovo and Chue Hong, Neil P. and Martinez-Ortiz, Carlos and Sesink, Laurents and Liffers, Matthias and Fouilloux, Anne Claire and Erdmann, Chris and Peroni, Silvio and Martinez Lavanchy, Paula and Todorov, Ilian and Sinha, Manodeep},
	urldate = {2022-01-28},
	date = {2021-09-13},
	doi = {10.5281/zenodo.5504016},
	keywords = {academic software, definition, {FAIR} principles, research software, scientific software, software source code},
}

@Book{regan2002,
  author    = {Regan, Gerard},
  date      = {2002},
  title     = {A practical approach to software quality},
  isbn      = {0387953213},
  location  = {New York},
  publisher = {Springer},
}

@Report{ronan1996,
  author      = {Ronan, Fitzpatrick},
  date        = {1996},
  institution = {{Technological University Dublin}},
  title       = {Software quality: definitions and strategic issues},
  type        = {resreport},
  url         = {https://arrow.tudublin.ie/scschcomrep/1},
}

@InCollection{april2006,
  author    = {April, Alain and Laporte, Claude Y.},
  booktitle = {Measuring Information Systems Delivery Quality},
  date      = {2006},
  title     = {An Overview of Software Quality Concepts and Management Issues},
  doi       = {10.4018/978-1-59140-857-4.ch002},
  pages     = {28--54},
  publisher = {{IGI} Global},
}

@Article{Molnar2020,
  author      = {Molnar, Arthur-Jozsef and Motogna, Simona},
  date        = {2020-09-02},
  title       = {A Study of Maintainability in Evolving Open-Source Software},
  eprint      = {2009.00959},
  eprintclass = {cs.SE},
  eprinttype  = {arXiv},
  abstract    = {Our study is focused on an evaluation of the maintainability characteristic in the context of the long-term evolution of open-source software. According to well established software quality models such as the ISO 9126 and the more recent ISO 25010, maintainability remains among key quality characteristics alongside performance, security and reliability. To achieve our objective, we selected three complex, widely used target applications for which access to their entire development history and source code was available. To enable cross-application comparison, we restricted our selection to GUI-driven software developed on the Java platform. We focused our examination on released versions, resulting in 111 software releases included in our case study. These covered more than 10 years of development for each of the applications. For each version, we determined its maintainability using three distinct quantitative models of varying complexity. We examined the relation between software size and maintainability and studied the main drivers of important changes to software maintainability. We contextualized our findings using manual source code examination. We also carried out a finer grained evaluation at package level to determine the distribution of maintainability issues within application source code. Finally, we provided a cross-application analysis in order to identify common as well as application-specific patterns.},
  file        = {:http\://arxiv.org/pdf/2009.00959v1:PDF},
  keywords    = {cs.SE, 68N01, D.2.8; D.2.7},
}

@WWW{lincke2007,
  author = {Lincke, Rüdiger and Löwe, Welf},
  date   = {4 April 2007},
  editor = {{ARISA}},
  title  = {{Compendium of Software Quality Standards and Metrics - Version 1.0}},
  url    = {http://www.arisa.se/compendium/quality-metrics-compendium.html},
}

@Article{Boettiger2015,
  author       = {Boettiger, Carl},
  date         = {2015-01},
  journaltitle = {{ACM} {SIGOPS} Operating Systems Review},
  title        = {An introduction to Docker for reproducible research},
  doi          = {10.1145/2723872.2723882},
  number       = {1},
  pages        = {71--79},
  volume       = {49},
  publisher    = {Association for Computing Machinery ({ACM})},
}

@TechReport{ClementFontaine2019,
  author    = {M{\'{e}}lanie Cl{\'{e}}ment-Fontaine and Roberto Di Cosmo and Bastien Guerry and Patrick Moreau and Fran{\c{c}}ois Pellegrini},
  date      = {2019-11},
  title     = {Encouraging a wider usage of software derived from research},
  doi       = {10.52949/4},
  publisher = {Minist{\`{e}}re de l{\textquotesingle}enseignement sup{\'{e}}rieur et de la recherche},
}

@Article{Zhao2016,
  author       = {Rongying Zhao and Mingkun Wei},
  date         = {2016-12},
  journaltitle = {Scientometrics},
  title        = {Impact evaluation of open source software: an Altmetrics perspective},
  doi          = {10.1007/s11192-016-2204-y},
  number       = {2},
  pages        = {1017--1033},
  volume       = {110},
  publisher    = {Springer Science and Business Media {LLC}},
}

@Article{Plesser2018,
  author       = {Hans E. Plesser},
  date         = {2018-01},
  journaltitle = {Frontiers in Neuroinformatics},
  title        = {Reproducibility vs. Replicability: A Brief History of a Confused Terminology},
  doi          = {10.3389/fninf.2017.00076},
  volume       = {11},
  publisher    = {Frontiers Media {SA}},
}

@Article{Hinsen2013,
  author       = {Konrad Hinsen},
  date         = {2013-07},
  journaltitle = {Computing in Science {\&} Engineering},
  title        = {Software Development for Reproducible Research},
  doi          = {10.1109/mcse.2013.91},
  number       = {4},
  pages        = {60--63},
  volume       = {15},
  publisher    = {Institute of Electrical and Electronics Engineers ({IEEE})},
}

@Comment{jabref-meta: databaseType:biblatex;}
